AMatch

Approximate Matching/Searching/Comparing

SYNOPSIS

    require 'amatch'

    m = Amatch.new("pattern")

    m.levenshtein_match("pattren")                # => 2.0
    m.levenshtein_match(["pattren","parent"])     # => [2.0, 4.0]
    m.levenshtein_search("abcpattrendef")         # => 2.0
    m.hamming("pattren")                          # => 2
    m.pair_distance("pattr en")                   # => 0.545454545454545
    m.pair_distance("pattr en", nil)              # => 0.461538461538462
    m.pair_distance("pattr en", /t+/)             # => 0.285714285714286
    m.longest_subsequence("pattren")              # => 6
    m.longest_substring("pattren")                # => 4


DESCRIPTION

This class enables your programs to do approximate matching, searching
and comparing of strings. It uses several algorithms that compute the
Levenshtein edit distance, the Hamming distance, the longest common
subsequence length, the longest common substring length, and the pair
distance metric.

CONSTRUCTOR

- Amatch#new(pattern)

constructs an Amatch object and initializes it with 'pattern'.

GENERAL METHODS

- Amatch#pattern         Returns pattern string to match against

- Amatch#pattern=(value) Sets the pattern string to value

LEVENSHTEIN EDIT DISTANCE

The Levenshtein edit distance is defined as the minimal costs involved
to transform one string into another by using three elementary
operations: deletion, insertion and substitution of a character. To
transform "water" into "wine", for instance, you have to substitute ?a
-> i?: "witer", ?t -> ?n: "winer" and delete ?r: "wine". The edit
distance between "water" and "wine" is 3, because you have to apply
three operations. The edit distance between "wine" and "wine" is 0, of
course: no operation is necessary for the transformation -- they're
already the same string. It's easy to see that more similar strings have
smaller edit distances than strings that differ a lot.

You can als use different weights for every operation to prefer special
operations over others. This extension of the Levenshtein edit distance
is also known under the names: Needleman-Wunch distance or Sellers
algorithm.

Related Methods

These are three accessor methods for the attributes substitution,
deletion, and insertion:

- Amatch#substitution[=] weight of one substitution (type Float and >= 0)

- Amatch#deletion[=]     weight of one deletion (type Float and >= 0)

- Amatch#insertion[=]    weight of one insertion (type Float and >= 0)

- Amatch#reset_weights   resets all weights to their default values (=1).

The following methods require the parameter 'strings'. This parameter
can be of type String or Array of Strings. The method executes the
matching operation and returns a number if a string was given. If an
array of strings was given, it returns an array of numbers.

- Amatch#levenshtein_match(strings)

  calculates the Levenshtein edit distance(s) between 'pattern' and
  'strings' = the edit distance in weighted char operations and returns
  it as a Float value. See also Amatch#pattern.

- Amatch#levenshtein_search(strings)

  searches 'pattern' in strings and returns the edit distance as a Float
  value, by greedy trimming prefixes or postfixes of the match.

HAMMING DISTANCE

The hamming distance between two strings is the number of characters,
that are different. Thus a hamming distance of 0 means an exact
match, a hamming distance of 1 means one char is different, and so
on.

Related Methods

- Amatch#hamming(strings)

  calculates the hamming distance(s) between 'pattern' and 'strings' and
  returns it as a Fixnum (or an Array of Fixnums, if strings is an Array
  of Strings). See also Amatch#pattern.

LONGEST COMMON SUBSEQUENCE LENGTH

The longest common subsequence is the longest subsequence, that is part of
both of the strings. A subsequence doesn't have to be contiguous. The
longer the common subsequence is, the more similar the two strings will
be.

The longest common subsequence between 'string' and 'storing' is
[ ?s, ?t, ?r, ?i, ?n, ?g ], thus the longest common subsequence length
is 6. 

Related Methods

- Amatch#longest_subsequence(strings)

  calculates the length of the longest subsequence common to 'pattern'
  and 'strings' and returns it as a Fixnum (or an Array of Fixnums, if
  strings is an Array of Strings). See also Amatch#pattern.

LONGEST COMMON SUBSTRING LENGTH

The longest common substring is the longest substring, that is part of
two strings. A substring is contiguous, while a subsequence need not to
be. The longer the common substring is, the more similar the two strings
will be.

The longest common substring between 'string' and 'storing' is 'ring',
thus the longest common substring length is 4. 

Related Methods

- Amatch#longest_substring(strings)

  calculates the length of the longest substring common to 'pattern'
  and 'strings' and returns it as a Fixnum (or an Array of Fixnums, if
  strings is an Array of Strings). See also Amatch#pattern.

PAIR DISTANCE METRIC

The pair distance between two strings is based on the number of adjacent
character pairs, that are contained in both strings. The advantage of
considering adjacent characters, is to take account not only of the
characters, but also of the character ordering in the original strings.

This metric is very capable to find similarities in natural languages.
It is explained in more detail in Simon White's article "How to Strike a
Match", located at this url:
http://www.catalysoft.com/articles/StrikeAMatch.html

Related Methods

- Amatch#pair_distance(strings, regexp = /\s+/)
  calculates the pair distance metric between 'pattern' and 'strings'.
  A returned value of 1.0 is an exact match, partial matches are lower
  values, while 0.0 means no match at all.

  The argument regexp is used to split the pattern and strings into
  tokens first. It defaults to /\s+/. If the splitting should be
  omitted, call the method with nil as regexp explicitly. See also
  Amatch#pattern.

EXAMPLES

An agrep utility will be installed that demonstrates the usage of this
library. Good examples can also be found in the "tests" directory, where
the unit tests are located.

AUTHOR

Florian Frank <flori@ping.de>

COPYRIGHT

Copyright (c) 2002-2005         Florian Frank <flori@ping.de>

This is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License Version 2 as published by
the Free Software Foundation: http://www.gnu.org/copyleft/gpl.html
