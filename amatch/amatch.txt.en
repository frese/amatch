AMatch

Approximate Matching/Searching/Comparing

SYNOPSIS

    require 'amatch'

    m = Amatch.new("pattern")

    p m.match("pattren")
    p m.match(["pattren","parent"])
    p m.matchr("pattren")
    p m.compare("pattren")
    p m.comparer("pattren")
    p m.compare("pattn")
    p m.comparer("pattn")
    p m.search("abcpattrendef")
    p m.searchr("abcpattrendef")
    p m.hamming("pattren")
    p m.hammingr("pattren")
    p m.pair_distance("pattren")
    p m.pair_distance("pattren", /t+/)
    p m.lc_subsequence("pattren")
    p m.lc_substring("pattren")

DESCRIPTION

This class enables your programs to do approximate matching, searching and
comparing of strings. It uses several algorithms that compute the Levenshtein
edit distance, the Hamming distance, the longest common subsequence length, the
longest common substring length, and the pair distance metric.

CONSTRUCTOR

- Amatch#new(pattern)

constructs an Amatch object and initializes it with 'pattern'.

GENERAL METHODS

- Amatch#pattern         Returns pattern string to match against

- Amatch#pattern=(value) Sets the pattern string to value

LEVENSHTEIN EDIT DISTANCE

The Levenshtein edit distance is defined as the minimal costs involved to
transform one string into another by using three elementary operations:
deletion, insertion and substitution of a character. To transform "water" into
"wine", for instance, you have to substitute ?a -> i?: "witer", ?t -> ?n:
"winer" and delete ?r: "wine". The edit distance between "water" and "wine" is
3, because you have to apply three operations. The edit distance between
"wine" and "wine" is 0, of course: no operation is necessary for the
transformation -- they're already the same string. It's easy to see that more
similar strings have smaller edit distances than strings that differ a lot.

You can als use different weights for every operation to prefer special
operations over others. There are three different kinds of match methods
defined in this class: "match" computes the Levenshtein distance between a
pattern and some strings, "search" searches in some text for a special pattern
returning a minimal distance, "compare" computes a value that can be used to
define a partial order between strings in relation to a given pattern. It's
also possible to compute a relative distance. This floating point value is
computed as absolute distance / length of search pattern.

RELATED METHODS

These are the accessor methods for the attributes substitution, deletion, and
insertion.

- Amatch#substitution[=] weight of one substitution (type Float and >= 0)

- Amatch#deletion[=]     weight of one deletion (type Float and >= 0)

- Amatch#insertion[=]    weight of one insertion (type Float and >= 0)

- Amatch#reset_weights   resets all weights to their default values (=1).

The following methods require the parameter 'strings'. This parameter can be of
type String or Array of Strings. The method executes the matching operation and
returns a number if a string was given. If an array of strings was given, it
returns an array of numbers.

- Amatch#match(strings)

  calculates the absolute edit distance(s) between 'pattern' and 'strings' =
  the Levenshtein distance in weighted char operations. See also
  Amatch#pattern.

- Amatch#matchr(strings)

  calculates the relative edit distance as float. This value is defined as the
  edit distance divided by the length of 'pattern'. See also Amatch#pattern.

- Amatch#search(strings)

  searches 'pattern' in strings and returns the edit distance by greedy
  trimming prefixes or postfixes of the match.

- Amatch#searchr(strings)

  does the same as Amatch#search but divides the edit distance by the length
  of 'pattern' and returns the value as float.

- Amatch#compare(strings)

  calculates the same absolute value like Amatch#match. The sign of the result
  value is negative if the strings are shorter than 'pattern' or positive
  else.

- Amatch#comparer(strings)

  calculates the same absolute value like Amatch#matchr. The sign of the
  result value is negative if the strings are shorter than 'pattern' or
  positive else.


HAMMING DISTANCE

XXX

- Amatch#hamming(strings)

  calculates the absolute hamming distance(s) between 'pattern' and 'strings' =
  the number of characters, that are different. See also Amatch#pattern.
        
- Amatch#hammingr(strings)

  does the same as Amatch#hamming but divides the edit distance by the length
  of 'pattern' and returns the value as float.


LONGEST COMMON SUBSEQUENCE LENGTH

XXX

LONGEST COMMON SUBSTRING LENGTH

XXX

PAIR DISTANCE METRIC

XXX

RELATED METHODS

- Amatch#pair_distance(strings, regexp = /\s+/)
  calculates the pair distance(s) between 'pattern' and 'strings'. The argument
  regexp is used to split the pattern and strings into tokens first. It
  defaults to /\s+/. If the splitting should be omitted, call the method with
  nil as regexp explicitly. See also Amatch#pattern.

EXAMPLES

An agrep utility will be installed that demonstrates the usage of this
library. Good examples can also be found in the "tests" directory, where
the unit tests are located.

AUTHOR

Florian Frank <flori@ping.de>

COPYRIGHT

Copyright (c) 2002-5        Florian Frank <flori@ping.de>

This is free software; you can redistribute it and/or modify it under the
terms of the GNU General Public License Version 2 as published by the Free
Software Foundation: http://www.gnu.org/copyleft/gpl.html
